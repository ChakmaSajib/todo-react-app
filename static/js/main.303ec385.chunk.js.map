{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","items","console","log","listItems","map","item","className","key","type","id","value","textData","onChange","event","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInputText","bind","addItem","this","setState","Date","now","preventDefault","newItem","filterItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,6MCoD5BC,MA9Cf,SAAmBC,GAEf,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAI,kBAAoBF,GAChC,IAAMG,EAAYH,EAAMI,KAAK,SAAAC,GAEzB,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BACIC,KAAK,OAAOC,GAAIJ,EAAKE,IACrBG,MAAQL,EAAKM,SACbC,SACI,SAACC,GACGd,EAAMe,UAAUD,EAAME,OAAOL,MAAOL,EAAKE,QAKzD,8BACA,kBAAC,IAAD,CACIS,KAAO,QACPV,UAAU,UACVW,QACI,WACIlB,EAAMmB,WAAWb,EAAKE,cAW9C,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BjB,K,eCrCjBkB,IAAQC,IAAIC,K,IAiGIC,E,kDA7Fd,WAAYzB,GAAO,IAAD,8BAChB,cAAMA,IACD0B,MAAQ,CAEXzB,MAAO,GAEP0B,YAAY,CACVf,SAAU,GACVJ,IAAK,KAIT,EAAKoB,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,QAAkB,EAAKA,QAAQD,KAAb,gBACvB,EAAKV,WAAqB,EAAKA,WAAWU,KAAhB,gBAC1B,EAAKd,UAAmB,EAAKA,UAAUc,KAAf,gBAfR,E,4DAkBFf,GACdiB,KAAKC,SAAS,CACZL,YAAY,CACVf,SAAUE,EAAME,OAAOL,MACvBH,IAAKyB,KAAKC,W,8BAKRpB,GACNA,EAAMqB,iBACN,IAAMC,EAAUL,KAAKL,MAAMC,YAG3B,GAFAzB,QAAQC,IAAIiC,GAEG,KAAZA,EAAe,CAChB,IAAM9B,EAAI,sBAAOyB,KAAKL,MAAMzB,OAAlB,CAAyBmC,IACnCL,KAAKC,SAAS,CACZ/B,MAAOK,EACPqB,YAAY,CACVf,SAAU,GACVJ,IAAK,S,iCAOFA,GACT,IAAM6B,EAAcN,KAAKL,MAAMzB,MAAMqC,QAAQ,SAAAhC,GAAI,OAC/CA,EAAKE,MAAQA,KACbuB,KAAKC,SAAS,CACd/B,MAAOoC,M,gCAMD/B,EAAME,GACd,IAAMP,EAAQ8B,KAAKL,MAAMzB,MAEzBA,EAAMI,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKM,SAAWN,MAIpByB,KAAKC,SAAS,CACZ/B,MAAOA,M,+BAMT,OACG,yBAAMM,UAAU,OACd,gCACC,0BAAMG,GAAG,YAAa6B,SAAUR,KAAKD,SACnC,2BAAOrB,KAAK,OAAOE,MAAOoB,KAAKL,MAAMC,YAAYf,SAAU4B,YAAY,aAAa3B,SAAUkB,KAAKH,kBACnG,4BAAQnB,KAAK,UAAb,SAGN,kBAAC,EAAD,CAAWR,MAAO8B,KAAKL,MAAMzB,MAAOkB,WAAYY,KAAKZ,WAAYJ,UAAWgB,KAAKhB,iB,GAjFpE0B,IAAMC,WCELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.303ec385.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './ListItems.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move';\n\n\nfunction ListItems(props){\n\n    const items = props.items;\n    console.log('from list item ' + items)\n    const listItems = items.map( item => {\n\n        return (\n            <div className=\"list\" key={item.key}>\n                <p>\n                    <input \n                        type=\"text\" id={item.key}\n                        value= {item.textData}\n                        onChange = {\n                            (event) => {\n                                props.setUpdate(event.target.value, item.key)\n                            }\n                        }\n                    \n                    />\n                <span>\n                <FontAwesomeIcon  \n                    icon = \"trash\" \n                    className=\"faicons\"\n                    onClick = {\n                        ()=>{\n                            props.deleteItem(item.key)\n                        }\n                    }\n                />\n                </span>\n                </p>\n            </div>\n        )\n    })\n\n\n    return(\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\" >\n                {listItems}\n            </FlipMove>    \n            \n        </div>\n    )\n}\n\nexport default ListItems","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './ListItems'\nimport ListItems from './ListItems';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash}  from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass  App extends React.Component {\n  // constructor \n  constructor(props){\n    super(props);\n    this.state = {\n      // empty array\n      items: [], \n\n      currentItem:{\n        textData: '',\n        key: ''\n      } \n    }\n    \n    this.handleInputText = this.handleInputText.bind(this)\n    this.addItem         = this.addItem.bind(this)\n    this.deleteItem         = this.deleteItem.bind(this)\n    this.setUpdate        = this.setUpdate.bind(this)\n  }\n   \n  handleInputText(event){\n    this.setState({\n      currentItem:{\n        textData: event.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(event){\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem)\n\n    if(newItem !== ''){\n      const item = [...this.state.items, newItem]\n      this.setState({\n        items: item,\n        currentItem:{\n          textData: '',\n          key: ''\n        }\n      })\n    }\n\n  }\n\n  deleteItem(key){\n    const filterItems = this.state.items.filter( item =>\n      item.key !== key);\n      this.setState({\n      items: filterItems\n    })\n  \n\n  }\n\n  setUpdate(item, key){\n    const items = this.state.items;\n\n    items.map(item =>{\n      if(item.key === key){\n        item.textData = item \n      }\n    })\n\n    this.setState({\n      items: items\n    })\n  }\n\n\n  render(){\n    return (\n       <div  className=\"App\">\n         <header>\n          <form id=\"todo-form\"  onSubmit={this.addItem}> \n            <input type=\"text\" value={this.state.currentItem.textData} placeholder=\"Enter Text\" onChange={this.handleInputText} />\n            <button type=\"submit\">ADD</button>\n          </form>\n      </header>\n      <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\n       </div>\n      \n    )\n  }\n  \n}\n\n// Input  text  handling - handleInputText(){} - currentItem -> text: \"simple text\", key\n// ADD button click handling - addButtonClicknItem(){}\n\n\n\n\nexport default  App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}